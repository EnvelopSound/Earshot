daemon off;

error_log /dev/stdout info;

user nginx;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen ${RTMP_PORT};
        chunk_size 4000;
        notify_method get;

        application live {
            live on;
            on_publish http://127.0.0.1:80/auth;
            exec ffmpeg -analyzeduration 10M -i rtmp://127.0.0.1/live/$name -strict -2 -c:a libopus -mapping_family 255 ${FFMPEG_FLAGS} -f dash /opt/data/$name.mpd 2>>/tmp/nginx_rtmp_ffmpeg_log;
        }
    }
}

http {
    access_log /dev/stdout combined;

    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    include mime.types;
    sendfile on;

    server {
        listen ${HTTP_PORT};

        # Uncomment these lines to enable SSL.
        # Update the ssl paths with your own certificate and private key.
        # listen 443 ssl;
        # ssl_certificate     /opt/certs/example.com.crt;
        # ssl_certificate_key /opt/certs/example.com.key;

        location / {
            return 200 'Health Check reply';
            # because default content-type is application/octet-stream,
            # browser will offer to "save the file"...
            # if you want to see reply in browser, uncomment next line
            # add_header Content-Type text/plain;
        }
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /opt/data;

            # modify these if you need different CORS settings
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Expose-Headers Content-Length;
        }

        # check auth token sent by RTMP encoder
        location /auth {
            if ($arg_token = '${RTMP_AUTH_TOKEN}') {
                return 201;
            }
            return 401;
        }

        location = /crossdomain.xml {
            root /www/static;
            default_type text/xml;
            expires 24h;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }

        location /static {
            alias /www/static;
        }

        # static nginx runtime info served to webtools
        location /nginxInfo {
            return 200 '{"ffmpegFlags":"${FFMPEG_FLAGS}"}';
        }

        location /webtools {
            root /www;
        }

        # uncomment this and comment above /webtools section for local webtools development / webpack hot reload
        # location /webtools {
        #     proxy_pass http://host.docker.internal:3000;
        #     proxy_redirect off;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }

        # location /sockjs-node {
        #     proxy_pass http://host.docker.internal:3000;
        #     proxy_redirect off;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }
    }
}
