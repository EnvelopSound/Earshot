Mappings:
  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.0.0/24
    pubsubnet2:
      cidr: 10.0.1.0/24


Parameters:
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >-
      Optional - Comma-delimited list of VPC availability zones in which to
      create subnets.  Required if setting VpcId.
    Default: ''


  Ami:
    Type: String
    Description: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI_launch_latest.html
    Default: ami-29f80351

  EmailAlerts:
    Type: String
    Default: ''

  InstanceType:
    Type: String
    Default: c5n.4xlarge
    AllowedValues:
    - t3.micro
    - t3.medium
    - t3.small
    - t3.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5n.large
    - c5n.xlarge
    - c5n.2xlarge
    - c5n.4xlarge
    - c5n.9xlarge
    - c5n.18xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to instances

  RtmpAuthToken:
    Type: String
    Default: ''

  FfmpegFlags:
    Type: String
    Description: Default setting for original 1080p stream with 720p and 360p adaptations
    Default: '-window_size 100 -max_muxing_queue_size 1000 -map 0:v:0 -map 0:v:0 -map 0:v:0 -map 0:\a?:0 -c:v:0 libx264 -filter:v:0 "scale=-1:360" -c:v:1 libx264 -filter:v:1 "scale=-1:720" -c:v:2 libx264 -adaptation_sets "id=0,streams=v id=1,streams=a"'

  Domain:
    Type: String
    Default: ''

  Email:
    Type: String
    Default: ''
  AccessKey:
    Type: String
    Description: AWS access key
    Default: ''

  SecretKey:
    Type: String
    Description: AWS secret key
    Default: ''



Conditions:
  UseSpecifiedVpcAvailabilityZones: !Not
    - !Equals
      - !Join
        - ''
        - !Ref VpcAvailabilityZones
      - ''

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      Tags: []
  PubSubnetAz1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags: []
      AvailabilityZone: !If
        - UseSpecifiedVpcAvailabilityZones
        - !Select
          - '0'
          - !Ref VpcAvailabilityZones
        - !Select
          - '0'
          - !GetAZs
            Ref: 'AWS::Region'
  PubSubnetAz2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags: []
      AvailabilityZone: !If
        - UseSpecifiedVpcAvailabilityZones
        - !Select
          - '1'
          - !Ref VpcAvailabilityZones
        - !Select
          - '1'
          - !GetAZs
            Ref: 'AWS::Region'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: []
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags: []
  PublicRouteViaIgw:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  EcsCluster:
    DependsOn: Vpc
    Type: AWS::ECS::Cluster

  Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId: !Ref Vpc

  SgAllTrafficports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'Sg'
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      CidrIp: 0.0.0.0/0

  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref EmailAlerts
          Protocol: email
      TopicName:
        Fn::Sub: ${AWS::StackName}-AlertsTopic

  HostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
            - ecs-tasks.amazonaws.com
            - s3.amazonaws.com
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-DescribeAWSPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:CompleteLifecycleAction
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackResources
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - ec2:DescribeInstances
            - ec2:DescribeTags
            - ec2:DescribeRegions
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSpotPriceHistory
            - ec2:DescribeAvailabilityZones
            - elasticloadbalancing:DescribeLoadBalancers
            Resource: "*"
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-LogsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: "*"
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-SendMessagesPolicy
        PolicyDocument:
          Statement:
          - Action: sns:Publish
            Resource:
              Ref: AlertsTopic
            Effect: Allow
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-GetCloudformation
        PolicyDocument:
          Statement:
          - Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - cloudformation:GetTemplate
            - cloudformation:List*
            Resource: "*"
            Effect: Allow

  HostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: HostRole

  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref PubSubnetAz1
      - !Ref PubSubnetAz2
      NotificationConfiguration:
        TopicARN:
          Ref: AlertsTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      HealthCheckGracePeriod: '600'
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: Lc
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: EC2ContainerService-${EcsCluster}
        PropagateAtLaunch: true
        PropagateAtLaunch: true
      - Key: Creator
        Value:
          Ref: KeyName
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        PauseTime: PT5M

  Lc:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: LcEIP
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Ref: Ami
      BlockDeviceMappings:
      - DeviceName: /dev/xvdcy
        Ebs:
          VolumeSize: 100
          VolumeType: gp2
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: HostProfile
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: Sg
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #cloud-config
            package_upgrade: true
            packages:
            - aws-cli
            - ntp
            - nfs-utils
            - wget
            write_files:
            - path: /etc/ecs/ecs.config
              content: |
                ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","gelf","awslogs"]
                ECS_CLUSTER=${EcsCluster}
                ECS_CONTAINER_STOP_TIMEOUT=125s
                ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=12h
                ECS_DISABLE_IMAGE_CLEANUP=false
                ECS_ECS_IMAGE_CLEANUP_INTERVAL=15m
                ECS_NUM_IMAGES_DELETE_PER_CYCLE=10
            runcmd:
            - vgextend docker /dev/xvdcy
            - lvextend -L+100G /dev/docker/docker-pool
            - lvextend -L+100G /dev/docker/docker-pool
            - export InstanceID=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id` &&  cd /usr/tmp && curl -O https://bootstrap.pypa.io/get-pip.py && sudo python27 get-pip.py && sudo /usr/local/bin/pip install awscli && export AWS_ACCESS_KEY_ID=${AccessKey} && export AWS_SECRET_ACCESS_KEY=${SecretKey} &&  aws ec2 associate-address --instance-id $InstanceID --allocation-id ${LcEIP.AllocationId} --region ${AWS::Region}
            - printenv > /tmp/envs.txt
            - stop ecs
            - service docker restart
            - start ecs

  LcEIP:
      Type: AWS::EC2::EIP

  CpuUtilization:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: Asg
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  MemoryUtilization:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: Asg
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        CustomizedMetricSpecification:
          MetricName: MemoryUtilization
          Namespace: AWS/ECS
          Dimensions:
          - Name: ClusterName
            Value:
              Ref: EcsCluster
          Statistic: Maximum
        TargetValue: 80

  NetworkInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: NetworkIn
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: High network input traffic during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '2400000000'

  RAMAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Memory utilization > 85% during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: System/Linux
      Threshold: '85'

  NetworkOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: NetworkOut
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: High network output traffic during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '2400000000'

  IOWaitAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: IOWait
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Alarm if IOWait > 85% for 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: AWS::StackName
        Name: StackName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '85'

  StatusAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: StatusCheckFailed
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmDescription: Alert if asg has degraded instances
      Statistic: Maximum
      Period: '60'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '2'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Unit: Count
      Namespace: AWS/EC2
      Threshold: '1'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: ${AWS::StackName}-LogGroup
      RetentionInDays: 14

  ApplicationScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EcsServiceLinkedRole:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: "ecs.amazonaws.com"
      Description: "Role to enable Amazon ECS to manage your cluster."
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'
  ProdEarshotTaskDefinition:
    DependsOn: Vpc
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: earshot
        Image: envelopsound/earshot:v0.2
        Memory: 40000
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
        - ContainerPort: 443
          HostPort: 443
        - ContainerPort: 1935
          HostPort: 1935
        Environment:
        - Name: HTTP_PORT
          Value: 80
        - Name: RTMP_PORT
          Value: 1935
        - Name: RTMP_AUTH_TOKEN
          Value: !Ref RtmpAuthToken
        - Name: FFMPEG_FLAGS
          Value: !Ref FfmpegFlags
        - Name: DOMAIN
          Value: !Ref Domain
        - Name: EMAIL
          Value: !Ref Email
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region:
              Ref: AWS::Region
            awslogs-group: !Ref LogGroup
            awslogs-stream-prefix:
              Ref: AWS::StackName

  ProdEarshotService:
    DependsOn: Vpc
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      TaskDefinition: !Ref ProdEarshotTaskDefinition
      #Role: !Ref 'EcsServiceLinkedRole'
      DesiredCount: 1

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref Vpc

Outputs:

  Asg:
    Value:
      Ref: Asg

  EcsCluster:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EcsCluster
    Value:
      Ref: EcsCluster

  EIPAllocationId:
    Value: !GetAtt LcEIP.AllocationId
    Export:
      Name: "LcEIP::AllocationId"
  EIPAddress:
    Value: !Ref LcEIP
    Export:
      Name: "LcEIP::Address"
